class bool     ::  boolean-32
class i8       ::   signed-16
class u8       :: unsigned-16 # we can give them two names, one identity right away
class char     ::   signed-32 # its fair to have char be all of unicode, as a primitive
class short    ::   signed-16
class ushort   :: unsigned-16
class int      ::   signed-32
class uint     :: unsigned-32
class i64      ::   signed-64
class u64      :: unsigned-64
class num      ::   signed-64
class half     ::     real-16  # we rarely have access to crazy types like this; if we are using it in a map for shading you would want to have access
class float    ::     real-32  # float can get-real 32 times
class double   ::     real-64  # double does twice that..
class quad     ::     real-128
# so why are traits preferred to subclassing?  and why is this two separate things still? 
# traits are from the interfaces, and we get that.  its an enumerable set of interfaces implemented
# it would be nice if we could do either one, but how
# & is a good operator, or |
# silver 2.0: E:trait1 | [trait2 & trait3]
# for now we simply check against proto or inheritance

template [ E ]
class array [
	intern ref E elements
	intern int array-size, array-count

	array [ int size ] [
		elements: @new-vector [ E, size ]
		array-size: size
		array-count: 0
	]

	int count[] return array-count
	int size[]  return array-size

	E operator [ int index ]  return @element-at [ elements, index ]

	a-user-method [ int arg ] [
	]

	delete [ int index ] [
		for [ int i :: index + 1 to array-count ]
			elements[ i - 1 ]: elements[ i ]
		return  # this is converted to return this
	]

	append [ E e ] [
		if [ array-size = array-count ] [
			array-size: 32 + array-size * 4
			elements: @resize [ elements, array-count, array-size ] # ref buffers are ref counted internally
			@set-element [ elements, array-count, e ]
			array-count += 1
		]
	]
]

class field [
	object key
	object value
]

# dont quite want map to be templated; lets use object
class map [
	array::field fields
]

# no template aliasing, not for silver-1

# since git allows us to checkout and then overlay:
#    then we leave it to git to 'overlay', that facility not needed at this level!
# so this reduces our build system to not require overlay; its a mere checkout and build
# we need a type identifier that links us to the actual type at runtime (type_t as well as its class)

##
# reserved for silver 2, hard code in import for now
class import [
	public token 	name
	public url  	source
	public string   shell
	public array::string links
	public array::string includes
	public var      defines 
	import [ token name ]

	init [ @import [ name, source, shell, links, includes, defines ] ]
	# init would always be called following constructor call; it makes sense from a control flow
	# it would call after exceptions were handled, its a reason why could be named finally
	# its more complex, but also dual purpose and complementary
	# its a 2nd way to work silver mods: init and use based on non default status
	# i would not want to call it start since that implies its connected graph-form, but there is no contextual access for that
]
##
