import WGPU [
    source:     'https://github.com/ar-visions/dawn@2e9297c45f48df8be17b4f3d2595063504dac16c',
    build:      ['-DDAWN_ENABLE_INSTALL=1', '-DBUILD_SHARED_LIBS=0'],
    includes:   ['dawn/webgpu', 'dawn/dawn_proc_table'],
    links:      ['webgpu_dawn']
]

import <stdlib, stdint, stdio>

class app [

    int64_t assert[ bool cond, cstr text ] [
        if not cond [
            exit[ 0 ]
        ]
    ]

    # all arguments are constants, we need code in silver to handle that
    # assignment would not be allowed on members of argument
    static void onDeviceRequestEnded[ WGPURequestDeviceStatus status, WGPUDevice device, symbol message, ref WGPUDevice userdata ] [
        ref userdata:    device
        # (*userdata) = device
        ref userdata[0]: device # same
        # writing existing is deref and declaration & reading is ref
        # its why we need to have code in EAssign to handle that with ERef
    ]

    int32_t init_webgpu[] [
        # create an instance
        WGPUInstanceDescriptor instanceDesc # always inserts {} for struct in C99
        WGPUInstance instance: wgpuCreateInstance[ ref instanceDesc ]

        assert[ instance, 'could not create instance' ]

        # request an adapter
        WGPURequestAdapterOptions adapterOpts: []
        adapterOpts.powerPreference: WGPUPowerPreference_HighPerformance # test 1-off member assignment

        WGPUAdapter adapter: null
        # what happens when we give an instance member to one that receives a function pointer
        # do we allocate a function call that calls our own instance?
        # technically in that way you wouldnt need any additional context for an instance
        wgpuInstanceRequestAdapter[ instance, ref adapterOpts, onAdapterRequestEnded, ref adapter ]
        assert[ adapter, 'adapter not set' ]

        # Request a device
        WGPUDeviceDescriptor deviceDesc: [
            requiredFeatureCount:   0,
            requiredLimits:         null,
            label:                 'Default Queue'
        ]

        WGPUDevice device
        wgpuAdapterRequestDevice[ adapter, ref deviceDesc, onDeviceRequestEnded, ref device ]
        assert[ device ]

        printf['WebGPU initialization successful!\n']

        # clean up
        wgpuDeviceRelease[ device ]
        wgpuAdapterRelease[ adapter ]
        wgpuInstanceRelease[ instance ]
    ]

    static void onAdapterRequestEnded[ WGPURequestAdapterStatus status, WGPUAdapter adapter, symbol message, handle userdata ] [
        ref WGPUAdapter[ userdata ] : adapter
    ]

    num run[] [
        init_webgpu[]
        return 0
    ]
]