# todo: should be checked out and installed without import, since A is our runtime
import A [
    source:     'https://github.com/ar-visions/A',
    links:      ['A']
]

import WGPU [
    source:     'https://github.com/ar-visions/dawn@2e9297c45f48df8be17b4f3d2595063504dac16c',
    build:      ['-DDAWN_ENABLE_INSTALL=1', '-DBUILD_SHARED_LIBS=0'],
    includes:   ['dawn/webgpu', 'dawn/dawn_proc_table'],
    links:      ['webgpu_dawn']
]

import <stdlib, stdint, stdio>

class app [

    # WGPUAdapter in C99 is a struct WGPUAdapterImpl* type (opaque-reference)
    static intern none onAdapterRequestEnded[
            WGPURequestAdapterStatus status, WGPUAdapter adapter,
            symbol message, handle userdata] [

        # no ability to construct with var args
        # array::i64 ar : [ 1, 2, 3, 4, 5 ]

        ref handle u: ref userdata
        handle something: userdata

        u: something
        return
    ]

    # ----------------------------------------------
    # handle string literals converting to 'string'
    # context functions are forced into being intern
    # also i am not going to really support a public import unless we can properly register imported types
    # there is the possibility of switching to clang
    # ----------------------------------------------
    intern bool a_context_fn[ i64 i :: i32 ctx ] [
        if [ i == 0 ] [ return false ]

        return true
    ]

    num run [] [
        # we may use fn if type assignment
        fn lambda : sub a_context_fn [ 1 ]
        # verify this
        
        lambda[ 2 ] # implement this interpretation
        string a_val: 'this is a string'
        # C99: create ctx struct, and caller method
        return 0
    ]
]