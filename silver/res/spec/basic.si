
# no templates?
# eh why have them come on.
# objects are just objects and you check for what they are yourself.
# its way less code, and thats better!
# why would we want to 'generate' more code?
# seriously. its an ignorant approach that leads to bloat
# if we want to never allow for things that can cause scalability problems we dont use templates
# the point of silver is to intelligently generate code that works, and generate FAR less than typical C++
# if we are mimmicking C++ templates then its the same anti-pattern

class base {
    init() {
        console.log('base initialized')
    }
}

# parse this
class aclass : base {
    public short i

    aclass(num i) {
        i:i
    }

    aclass add(aclass b) {
        return aclass(i + b.i)
    }

    ##
    init() {
        # all members with initializers are constructed, otherwise its default instance (0 for primitives, )
        # vars set by user by name (initializing by values only is not allowed, thats why we have constructors)
        # seems not possible to blend both named arguments and ability to construct with named arguments
    }


    short { # <- this is an instance conversion method, no args allowed so no parenthesis
        return i
    }

    short operator(num i) {
        # syntax: instance[1]
        # thats an operator. you can also have multiple args
    }
    ##
}

##
a = aclass(i: 1) # all members set except for i, then i set, then init called (no constructor called -- but what about base?)
b = aclass(1)
##

class bclass {
    aclass[] instances

    i32, aclass dosomething2(aclass a, aclass another, aclass another2) {
        instances += a # M(array, push, instances, a) <- will increment ref
        # we dont hold or drop args in methods, its up to the caller to do that (although, thats WAY more code, lol)
        # is it a substitute to release at the end of a method?
        # i just think if methods do it for args in 1 spot, then we arent doing it for args in all method calls.
        # that would be more code
        return 1, another2 # another2 gets a ref increased here # we can handle this with a goto in C99
    }

    num dosomething1() {
        aclass another # default constructed (always possible with these objects)
        if (true) {
            aclass arg1 = aclass(2)
            i32 v0, aclass v1 = dosomething2(arg1 + another + another, another, aclass(1))
            # aclass(1) will drop here
            num some_other = 2
            # arg1 will drop here
            # v1 will drop here (actually dropping aclass(1))
        }
        # another will drop here
        return 1
    }
}

##
C99 version:

#define aclass_meta(X,Y,Z) \
    public(X,Y,Z, short, i) \
    imethod(X,Y,Z, T, add, aclass)
declare_class(aclass)
define_class(aclass)

#define bclass_meta(X,Y,Z) \
    property(X,Y,Z, array, instances) \
    imethod_R2(X,Y,Z, void, dosomething2, aclass, aclass, aclass, i32*, aclass*) \
    imethod(X,Y,Z, num, dosomething1, aclass, aclass, aclass)
declare_class(bclass)
define_class(bclass)

# -> emits:
typedef struct aclass {
    short i;
} *aclass;

typedef struct bclass {
    array instances;
} *bclass;

typedef struct aclass_f {
    # ...
} *aclass_t;

typedef struct bclass_f {
    # ...
    void (*dosomething2)(bclass, aclass, aclass, aclass, i32*, aclass*);
    num (*dosomething1)(bclass);
} *bclass_t;

void bclass_dosomething2(bclass inst, aclass a, aclass another, aclass another2, i32* r0, aclass* r1) {
    M(array, push, instances, a) <- will increment ref

    # return 1, another2  (outputs)
    *r0 = 1;
    *r1 = (aclass)hold(another2)
    goto drop_args; 

    # for each argument of A-type
    drop_args:
    drop(a)
    drop(another)
    drop(another2)
}

num bclass_dosomething1(bclass inst) {
    aclass another = new(aclass);
    if (true) {
        aclass arg1 = new(aclass, with_num, 2);

        i32 v0;
        aclass v1;
        // each call into a method gives us more call scope to obtain arguments
        // the return args we leave outside and above 
        {
            // for each arg given:

            // compute _arg0 with a series of vars at each expression leaf
            // + addition on an instance is a method call, and here we are adding twice
            // each addition node will have a variable reference
            aclass _temp0 = M(aclass, add, arg1, another);
            aclass _temp1 = M(aclass, add, _temp0, another);
            drop(_temp0); // drop as we go through the enode series

            aclass _arg0 = _temp1;

            // compute _arg1 (this one is a simple variable reference, so hold)
            aclass _arg1 = hold(another);

            // compute _arg2 (this one was a new object expression)
            aclass _arg2 = new(aclass, with_num, 1);

            dosomething2(_arg0, _arg1, _arg2, &v0, &v1)
            // dropping here instead of the method call creates more code.
            // that is unless callers dont outnumber the functions.
            // they generally do by nature
        }

        num some_other = 2;
        // arg1 will drop here
        drop(arg1);

        // v1 will drop here (actually dropping arg2: aclass(1))
        drop(v1);
    }
    // another will drop here
    drop(another);
    return 1
}

##