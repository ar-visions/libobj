#ifndef _TOKENS_
#define _TOKENS_
#include <A>

typedef struct silver* silver;
typedef struct type*   type;
typedef struct dim*    dim;

#define Loc_schema(X,Y) \
    i_prop    (X,Y, public, path,   source) \
    i_prop    (X,Y, public, num,    line) \
    i_prop    (X,Y, public, num,    column) \
    i_override(X,Y, cast,   string) \
    i_override(X,Y, method, init)
declare_class(Loc)

#define EContext_schema(X,Y) \
    i_prop      (X,Y,  public,  silver,     module) \
    i_prop      (X,Y,  public,  dim,        method) \
    i_prop      (X,Y,  public,  array,      states) \
    i_prop      (X,Y,  public,  bool,       raw_primitives) \
    i_prop      (X,Y,  public,  map,        values) \
    i_prop      (X,Y,  public,  num,        indent_level) \
    i_method    (X,Y,  public,  string,     indent) \
    i_method    (X,Y,  public,  none,       set_value, A, A) \
    i_method    (X,Y,  public,  A,          get_value, A) \
    i_method    (X,Y,  public,  none,       push, string) \
    i_method    (X,Y,  public,  none,       pop) \
    i_method    (X,Y,  public,  string,     top_state)
declare_class(EContext)

#define Token_schema(X,Y) \
    i_prop      (X,Y,  public,  cstr,       chars) \
    i_prop      (X,Y,  public,  i32,        chr) \
    i_prop      (X,Y,  intern,  sz,         len) \
    i_prop      (X,Y,  intern,  path,       file) \
    i_prop      (X,Y,  intern,  num,        line) \
    i_prop      (X,Y,  intern,  num,        column) \
    i_prop      (X,Y,  intern,  Loc,        loc) \
    i_method    (X,Y,  public,  bool,       eq,         cstr) \
    i_method    (X,Y,  public,  num,        cmp,        cstr) \
    i_method    (X,Y,  public,  AType,      get_type) \
    i_method    (X,Y,  public,  A,          convert_literal) \
    i_method    (X,Y,  public,  Loc,        location) \
    s_method    (X,Y,  public,  string,     op_name, string) \
    i_override  (X,Y,  method,  init) \
    i_override  (X,Y,  method,  compare) \
    i_override  (X,Y,  cast,    string) \
    i_override  (X,Y,  cast,    bool)
declare_class(Token)

typedef struct type*   type;
typedef struct silver* silver;

#define Tokens_schema(X,Y)\
    i_prop      (X,Y,  public,  path,       file) \
    i_prop      (X,Y,  public,  array,      tokens) \
    i_prop      (X,Y,  public,  num,        cursor) \
    i_prop      (X,Y,  intern,  array,      stack) \
    i_method    (X,Y,  public,  Loc,        location) \
    i_method    (X,Y,  public,  none,       push_state,   array, num) \
    i_method    (X,Y,  public,  none,       push_current) \
    i_method    (X,Y,  public,  none,       pop_state, bool) \
    i_method    (X,Y,  public,  Token,      read, num) \
    i_method    (X,Y,  public,  Token,      next) \
    i_method    (X,Y,  public,  Token,      prev)\
    i_method    (X,Y,  public,  Token,      consume) \
    i_method    (X,Y,  public,  Token,      peek) \
    i_method    (X,Y,  public,  bool,       next_is, symbol) \
    i_method    (X,Y,  public,  string,     next_string) \
    i_method    (X,Y,  public,  string,     next_alpha) \
    i_method    (X,Y,  public,  object,     next_bool) \
    i_method    (X,Y,  public,  object,     next_numeric) \
    i_method    (X,Y,  public,  object,     next_literal) \
    i_method    (X,Y,  public,  string,     next_assign) \
    i_method    (X,Y,  public,  object,     read_numeric) \
    i_method    (X,Y,  public,  type,       read_type, silver) \
    i_override  (X,Y,  method,  init) \
    i_override  (X,Y,  cast,    bool)
declare_class(Tokens)

array parse_tokens(object input);
bool  next_is(Tokens tokens, symbol cs);
bool  is_alpha(A any);

#endif